#!/usr/bin/env python3
from IPython import embed
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import seaborn as sns
from argentina.raw import date_indexed_raw, DISTRITOS, distritos_afectados
from argentina.proc import daily_new_cases



def plot_global(df):
    acumulado = df.reset_index().groupby(['index', 'case']).sum().unstack().fillna(0).cumsum()
    acumulado.columns = acumulado.columns.droplevel()
    sns.set()
    sns.set_context("talk")
    sns.lineplot(data=acumulado, markers=[".", ".", "."], dashes=False)

    # fit = np.linspace(0, len(acumulado), len(acumulado))**2
    # plt.plot(acumulado.index, fit, "--", color="lightgray")
    # plt.annotate(r'$x^2$',  xy=(acumulado.index[17], 320), xycoords='data', xytext=(-50, -60), textcoords='offset points', arrowprops=dict(arrowstyle='->', color='black', connectionstyle="angle3,angleA=90,angleB=0"))

    # fit = np.linspace(0, len(acumulado), len(acumulado))**3
    # plt.plot(acumulado.index, fit, "--", color="lightgray")
    # plt.annotate(r'$x^3$',  xy=(acumulado.index[6], 280), xycoords='data', xytext=(-50, -60), textcoords='offset points', arrowprops=dict(arrowstyle='->', color='black', connectionstyle="angle3,angleA=90,angleB=0"))

    fit = -1600 + 95*np.linspace(0, len(acumulado), len(acumulado))
    plt.plot(acumulado.index, fit, "--", color="lightgray")

    plt.title("Coronavirus en Argentina", fontsize=18)  # for title
    plt.xlabel("Fecha", fontsize=14)
    plt.ylabel("# casos", fontsize=14)
    plt.ylim(0, df.groupby('case').new.sum().max() * 1.2)
    plt.show()


def plot_daily_cases(df):
    news = daily_new_cases(df)
    sns.set()
    sns.set_context("talk")
    chart = sns.lineplot(data=news, markers=['.']*30, dashes=False)
    chart.set_xticklabels(chart.get_xticklabels(), rotation=45, horizontalalignment='right')
    plt.show()


def plot_geo(df):
    midpoint = (df.new.values.max() - df.new.values.min()) / 10
    heat = df[df.case == 'CONFIRMADO'].reset_index().groupby(['index', 'place'])['new'].max().unstack()
    heat.index = heat.index.strftime("%d-%m")

    # Transpongo para que quede el tiempo horizontal
    sns.heatmap(heat[_geordenados].T,
                annot=True,
                cbar=False,
                cmap='coolwarm',
                center=midpoint,
                annot_kws={'size':6, 'rotation':45})

    plt.xlabel('Fecha')
    plt.ylabel("")
    plt.yticks(np.arange(0.5,24.5, 1), _geordenados, fontsize=10)
    plt.xticks(rotation=45)
    plt.xticks(fontsize=10)
    plt.title("Confirmados por provincia")
    #plt.grid(True)
    plt.show()


def nuevos_casos_pct_change(df):
    # NUEVOS CASOS VS. ACUMULADOS
    cases_per_day = df.reset_index().groupby(['index', 'case']).sum().unstack().fillna(0)
    cases_per_day.columns = cases_per_day.columns.droplevel()

    # Armo pandas con index: fechaa  y dos columnas de casos confirmados: nuevos y acumulado
    data = pd.concat([cases_per_day.CONFIRMADO.rename('new_cases'), cases_per_day.CONFIRMADO.cumsum().rename('acumulado')], axis=1)

    plt.loglog(data.acumulado, data.new_cases, marker=".")

    # me quedo con las fechas en las que el cambio porcentual de nuevos casos fue mayor a THRESHOLD_PERCENTAGE
    THRESHOLD_PERCENTAGE = 60
    threshold = THRESHOLD_PERCENTAGE / -100
    locs = data.reset_index().index[(data.new_cases/data.acumulado).pct_change() < threshold].tolist()
    locs_data = data.index[(data.new_cases/data.acumulado).pct_change() < threshold].strftime("%d-%m").to_list()

    # seÃ±alo esos puntos
    for loc in range(len(locs)):
       plt.annotate(r'${}$'.format(locs_data[loc]),  xy=(data.iloc[locs[loc]-1].acumulado, data.iloc[locs[loc]-1].new_cases), xycoords='data', fontsize=10, xytext=(-60, 30), textcoords='offset points', arrowprops=dict(arrowstyle='->', color='black', connectionstyle="angle3,angleA=-90,angleB=0"))

    plt.title("Coronavirus en Argentina - Confirmados", fontsize=18)
    plt.xlabel("Casos Totales", fontsize=14)
    plt.ylabel("Nuevos Casos", fontsize=14)
    plt.show()


def plot_animation(df):
    casos = df.reset_index().groupby(['index', 'case']).sum().unstack().fillna(0)
    casos.columns = casos.columns.droplevel()

    x = casos.CONFIRMADO.cumsum()
    y = casos['CONFIRMADO']

    fig, ax = plt.subplots()
    line, = ax.semilogy(x, y, marker='.')

    def update(num, x, y, line):
        line.set_data(x[:num], y[:num])
        return line,

    ani = animation.FuncAnimation(fig, update, len(x), fargs=[x, y, line], interval=75, blit=True)

    plt.title("Coronavirus en Argentina - Confirmados", fontsize=18)
    plt.xlabel("Casos Totales", fontsize=14)
    plt.ylabel("Nuevos Casos", fontsize=14)

    #ani.save('animation_confirmados.gif')
    plt.show()

def run_last_day_check(df):
    total = df.groupby(['case']).sum()
    casos_ultimo_dia = df.reset_index().groupby(['index', 'case']).sum().unstack().iloc[-1]
    confirmados_por_provincia_ultimo_dia = df[df['case'] == 'CONFIRMADO'].reset_index().groupby(['index', 'place'])['new'].max().unstack().fillna(0).iloc[-1]

    print(total)
    print(casos_ultimo_dia)
    print(confirmados_por_provincia_ultimo_dia)

if __name__ == "__main__":
    df = date_indexed_raw
    _geordenados = list(filter(lambda d: d in distritos_afectados(df), DISTRITOS))

    ## DIARIO
    plot_daily_cases(df)

    ## ACUMULADO
    plot_global(df)

    ## GEOGRAFICO
    plot_geo(df)

    ## NUEVOS VS ACUMULADO
    nuevos_casos_pct_change(df)
    plot_animation(df)

    #run_last_day_check(df)
    #embed()
